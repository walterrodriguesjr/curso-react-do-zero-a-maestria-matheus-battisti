SEÇÃO 1: INTRODUÇÃO 


1-introdução do curso 
-explicação do curso do conteúdo a ser utilizado 

2-apresentação do curso 
-sobre os módulos e os projetos 

3-o que é o react? 
-é uma biblioteca Javascript para aplicações front-end 
-aplicações chamadas de SPA 
-React é baseado em componentes 
-mantido pelo facebook 

4-o que é node.js?
-node.js é uma runtime do Javascript, ou seja, biblioteca para compilar furante a execução do programa 
-possibilita criar softwares em JS no lado do servidor, nos bastidores, o código JS roda em C++ 

5-o que é o npm? 
-npm é um gerenciador de pacotes do node 
-possibilita utilizar bibliotecas de terceiros 
-os módulos externos ficam em uma pasta chamada node_modules 
-a pasta node_modules deve ser descartável, ou seja, a cada instalação do projeto baixamos todos os pacotes novamente 

6-instalação do node.js no windows 
-já instalado 

7-instalação do node.js no linus
-não necessário 

8-instalação do vs code 
-já instalado

9-hello world com react 
-react precisa ser instalado na pasta que será o projeto, via npx, e posteriormente iniciado 
    npx create-react-app hello-world
    npm start

10-estrutura inicial do react 
-node_modules = onde ficam as dependências do projeto (não versionada por ser muito grande)
-public = Assets estáticos e HTML de inicialização (é o que o usuário tem acesso quando acessa)
-src = onde são de fato programados os apps, onde vão os componentes e etc...
-src/index.js = arquivo de inicialização do react 
-src/App.js = componente principal da aplicação 

11-extensão para o vs code para react 
-es7 + React/Redux/React-Native snippets (já instalado) 
-analisar os atalhos para criar uma estrutura de componente já pronta e várias outras coisas

12-configurando o Emmet para o react 
-é uma extensão nativa do vs code que ajuda a escrever HTML mais rapido, porém não vêm configurado 
    por padrão 
-acessa: File > Settings > Extensions e procurar o Emmet 
    lá vamos incluir a lunguagem: javascript - javascriptreact 
(serve para não precisar ficar fazendo o HTML todo não, e sim usar as abreviações)

13-como tirar o melhor proveito deste curso 
-sempre fazer os códigos junto 
-fazer os exercícios 

14-repositório do curso 
-https://github.com/matheusbattisti/curso_react

-tarefa 1: praticando react 
-ok

15-conclusão da seção 
-ok


SEÇÃO 2: FUNDAMENTOS DO REACT 


16-introdução da seção 
-ok 

17-criando componentes
-os componentes ficam em uma pasta criada manualmente, chamada 
    components, nome do componente.js 
-por padrão, cada componente inicia com a area de importação, 
    caso houver, onde pega dados de outro componente. No corpo, 
    é onde vai a sua funtion() que retorna a sua ação. 
    Por último, é onde vai a sua exportação, para que o template 
    seja recebido pelo App.js. 
-criado novo projeto do módulos: 
    npx create-react-app fundamentos 
-criado em src, a pasta components, e dentro o componente 
    FirstComponent.js 
    feito todo processo de configurar a funtion() em arrow function 
    e sua exportação 

18-importação de componentes 
-primeiramente o componente precisa ter seu export definido 
-geralmente são importados em App.js, lá deve ser feito a importação 
    do componente, em seguida inserido dentro de < />

19-conhecendo o JSX 
-JSX é o HTML dodo react 
-ficam no return do componente 
-pode ter apenas um elemento pai 
-JSX é javascript rodando pelo react 

20-comentários nos componentes 
-// ou /*  */

21-template expressions 
-para interpolar JS dentro do JSX, basta envolver entre chaves { }

22-hierarquia de componentes 
-os componentes podem ser reutilizados em outros componentes, e não 
    somente no App.js, sempre utilizando os métodos de import e export 

23-eventos 
-eventos servem para disparar alguma ação 
-a chamada do evento faz no próprio html: onClick={nomeDaFunction}, 
    e dentro do componente deste evento, cria-se a função a ser realizada 

24-funções no evento 
-é possível executar a lógica da função direto no HTML, porém, não 
    é recomendado. (função in-line)

25-função de renderização 
-funções que retornam JSX 

Tarefa 2: Desafio sobre os conceitos básicos de React
-ok 

26-conclusão da seção 
-ok

teste 1-Quiz sobre fundamentos 
-ok 


SEÇÃO 3: AVANÇANDO EM REACT 


27-introdução da seção 
-ok 

Tarefa: Desafio sobre criação de apps em React
-ok 

28-imagens públicas em react 
-as imagens públicas do projeto podem ficar na pasta public 
-quando estiverem lá, podem ser chamadas pelas tags img diretamente por: /home.jpg, pois, a pasta public 
    fica linkada com src das imagens. Quando está em public, apenas o / mais o nome da img

29-imagens em src(Assets)
-colocar as imagens em: src/assets é uma abordagem bem utilizada 
-em assets é preciso importar a imagem, como se fosse um componente mesmo 
    ex: import City from './assets/city.jpg'; 

30-o que são hooks? 
- são recursos do react que tem diversas funções, evita ter que recriar funções
-todos os hooks começam com 'use', ex: useState 
-podemos criar os próprios hooks, os custom hook
-hooks precisam ser importados 

31-useState na prática 
-é um dos mais utilizados 
-utilizado para gerenciar o estado de algum dado 
-atalho para criar o template de um componente: rafce 
-o useState, precisa que inicie uma const de array com 2 valores, um que consome o que existe no parâmetro 
    de useState() e o outro que seta, e o paramêtro deste, pode alterar o valor no primeiro item do array 

32-renderização de listas 
-utiliza o método map() para auxiliar 
-o map() ajuda a listar item por item de um array, criado anteriormente dentro de um const  

33-a proprioedade key 
-iterar listar sem a proprioedade key nos gera um warning, mostrado no console 
-quando usado o map, em seu parâmetro onde vai o item, em segundo colocamos um 'i', em seguida chamado na 
    li com o key 

34-previous state 
-(estado anterior) 
-ficaram dúvidas 

35-renderização condicional 
-é quando imprimimos uma parte do template baseado em uma condição 
-interessante usar, por exemplo, em situações de usuário autenticado ou não  

36-if e else no JSX 
-no caso, usado o if ternário 
    ex: condicao ? bloco1 : bloco 2 

37-introdução as Props 
-permite passar valores de um componente pai para um componente filho 
-muito útil quando os dados forem carregados via banco de dados 
-as Props vem em um objeto no argumento da função do componente 
-o Props é inserido no App.js e lá o dado recebe um nome 
    já no componente que for usar o Props, ele é definido no parâmetro da função, e vai ser tratado como um objeto 
    onde o dado for chamado no componente, entre {} chama-se props.nomeDoDado 
-o componente pai, que no caso é App.js estão passando dados para o componente filho, que no caso é ShowUserName.js 
-ele pode receber valores diretos, valores de variável, e valores de state 

38-destructuring em props 
-é comum passar mais de um prop em um componente 
-para facilitar, o react permite desustruturar as propriedades que chegam, com o recurso destructuring 
-é a forma mais moderna 
-neste caso, não precisa chamar como na maneira anteiro. igual objeto: props.algumaCoisa 

39-reaproveitamento de componente 
-o props tem o objetivo por si só, reaprovietar componente 
-o mesmo componente pode ser reaproveitado quantas vezes forem necessárias 

40-renderização de lista em componente 
-é uma reutilização com loop, usando o map() 
-faz se a chamada direto no App.js, a chamada do componente vi estar dentro de um loop com map()

41-Fragments 
-são interessantes para quando precisamos ter mais de um elemento pai em um componente 
-criamos uma tag vazia: <>...</>, e ela serve como um elemento pai 

42-a prop children 
-consiste em, no paramêtro da função do componente, definir um children desestruturado, e, no corpo da função 
    do mesmo componente, definir a children também.
    no App.js, o componente em questão deve estar entre tag dupla do componente(<componente></componente>)
        e dentro disso, pode se incluir outras tags HTML 

43-função com prop 
-consiste em, um componente pai, que detém a function(), porém, é acionada por um componente filho, o qual 
    contém o método de click em um button, e sua prop quando acionada no elemento pai, chama a referida function() 

44-state lift 
-conhecido como elevação de state, que é quando um valor é elevado do componente filho para o componente pai 
-geralmente temos um componente que usa o state e outro que o altera 

Desafio 4 
-ok 

45-conclusão da seção 
-ok 


SEÇÃO 4: REACT E CSS 


46-introdução da seção 
-ok 

47-css global 
-é utilizado para estilizar diversos elementos em comum ou fazer um reset no css 
-utilizamos o arquivo index.css para isso, que está na pasta src 
-feito reset css em index.css 

48-CSS de componentes 
-é um CSS feito para um componente específico, tem o mesmo nome do componente, porém com a extensão .css 
-precisa este .css, ser importando no seu componente 
-para inserir um class em uma tag, diferente do HTML comum, usa-se o className 

49-CSS inLine 
-é igual ao css inline do CSS comum 
-porém, css inline deve-se ser evitado, por boas práticas de programação 

50-CSS inline dinâmico 
-maniera mais avançada do inline comum 
-aplica estilo baseado em uma condicional 
-usa-se a condicional ternário dentro do próprio style 
  
51-classes dinâmicas 
-consiste em aplicar lógica para mudar a classe de CSS de um elemento 
-usa o if ternário, condicionando entre 2 classes css
-as classes ficam isoladas no arquivo .css 

52-CSS modules 
-é um recurso de CSS scoped 
-ele vai ser exclusivo do componente, não vaza 
-o nome será: Componente.module.css 
-precisa ser importado também 

Tarefa 5 - desafio sobre react com css 
-ok 

53-coclusão da seção 
-ok 


SEÇÃO 5: FORMULÁRIOS COM REACT


54-introdução da seção 
-ok 

55-criando formulários 
-usa-se como no JS puro, a tag <form> 
-as labels dos inputs contém o atributo htmlFor, que deve ter o valor do name do input 
-NÃO UTILIZAMOS ACTION, pois o processamento será feito de forma assíncrona 

56-label envolvendo input 
-é um padrão comum 
-isso faz com ue, o atributo for se torne opcional 
-simplica a estrutura do HTML 

57-gerenciamento de dados do input 
-para manipular os valores ods inputs, usa-se o hook useState 
-possibilita armazenar na variável e utilizar o set para alterar o valor 
-necessita uso de uma função para alterar o valor no evento onChange

58-alteração de state inline 
-quando temos vários inputs podemos realizar a manipulação de forma mais simples 
-basicamente, é criada uma função inline no onChange 
-vai alterar o valor do state com o método set, da mesma forma que a função isolada 

59-envio de form 
-para enviar um from, utilizamos o evento onSubmit 
-ele chamará uma função, e nesta devemos lembrar de parar a submissão com o preventDefault 
-criado um componente para testar conhecimento de form, Teste.js 

60-controlled input 
-permite mais flexibilidade nos forms do react 
-necessita igualar o valor ao state 
-muito usado em form de edição, qunado os dados vem do back-end 

61-resetando formulários 
-com controlled input limpar o form será mais fácil 
-basta atribuir um valor de uma string vazia aos states e pronto 
-será feito após o envio 

62-textarea no react 
-é considerado um input de text normal 
-utiliza o value para alterar o state inicial 
-usa o evento onChange para modificar o valor do state 

63-select no react 
-semelhante a outros inputs 
-usa o onChange 

64-conclusão da seção 
-ok 


SEÇÃO 6: PROJETO:SECRET WORD 


65-apresentação do projeto
-ok 

66-criando o projeto 
-configurado o o projeto 

67-ajustes gerais 
-congifurado CSS inicial de App.css e index.css 

68-finalizando tela inicial 
-ok 

69-criando componentes do projeto 
-o projeto tem basicamente 3 estagios de componentes: StartScreen, Game e GameOver, cada um com seu CSS 
-o arquivo que simula dados de banco, words.js, é importado diretamente em App.js 
-um const de nome stages, do tipo array de objetos, contém os 3 estágios do projeto 
-o wordList importado de words.js, vai para dentro de uma const chamada words via useState

70-alterando os estágios do jogo 
-através de 3 funções criadas em App.js (startGame(), verifyLetter(), retry()) atreladas a ações onClick={}
   de seus respectibos componentes, foi feito as ações de mudanças de tela 

71-escolhendo palavra e categoria de forma aleatória 
-em App.js, criado a função pickWordAndCategory() que fica responsável por manipular, e randomizar as 
    palavras de chave e valor dos dados de words.js 
-dentro da função startGame(), feito as separações por palavras 

72-estruturando componentes do jogo 
-configurado o HTML de Game.js 

73-CSS da tela do jogo 
-configurado CSS de Game.css 

74-consumindo states do jogo 
-funções incluídas em App.js, onde chama o componente Game e em seguida, em seu próprio componente como prop 

75-evento de inserção de letra
-ok 

76-processando letras válidas e inválidas 
-ok 

77-lógica para o fim do jogo 
-ok 

78-finalizando tela de fim de jogo 
-ok 

79-condição de vitória 
-ok 

80-conclusão do projeto 
ok 


SEÇÃO 7: REQUISIÇÕES HTTP COM REACT 


81-introdução da seção 
-ok

82-criando projeto com JSON server 
-JSON server é um pacote npm, ele simula uma API, possibilitando requisições HTTP 
-instalando o JSON server 
-configura no package.json
    npm i json-server
    npm run server
-se não abrir no chrome, tentar no mozilla que é certeza 

83-a importância do useState 
-faz com que determinada ação seja executada apenas uma vez 
-é um hook do react 
-sempre estará presente nas requisições assíncronas 

84-resgatando dados da API 
-recursos utilizados: 
    primeiramente ter um local para salvá-los(useState);
    renderizar a chamada a API apenas uma vez(useEffect);
    um meio de fazer a requisição assíncrona(fetch API);


SEÇÃO 10: PROJETO: MINIBLOG (REACT ROUTER, HOOKS, CONTEXT, FIREBASE, AUTENTICAÇÃO)


115-apresentação do projeto 
-ok 

116-setub do firebase 
https://firebase.google.com
-criado projeto miniblog no firebase 

117-criando o projeto 
-npx create-react-app miniblog
-npm i firebase
-configuração do projeto 

118-integrando o firebase ao react 
-criado a pasta firebase e dentro, o arquivo config.js 

119-configurando o React Router 
-instalando o react-router-dom 
    npm i react-router-dom
-criado componentes em src. criado pasta pages e dentro arquivos js e css de Home e About 
-em App.js criado a esturtura de BrowserRouter, Routes e Route 

120-adicionando componente de navbar 
-em src, criada a pasta components 
-em components. criado os arquivos js e css de Navbar e Footer 

121-CSS navbar e footer 
-criado os estilos de navbar e footer 

122-estilos gerais do projeto 
-aplicada a fonte do google fonts, montserrat, todos os tamanhos 
-configurado o index.css 

123-criando formulário de cadastro 
-na pasta pages, criado as pastas e arquivos js e css de Login e Register 
-estruturado o HTML do form de Register.js 

124-CSS do formulário 
-criado o css dos form em index.css 

125-States do form de cadastro 
-const Register() (método) detém os useState de todos os inputs 
-const handleSubmit() (método) ativado quando o form é submetido. criando a const user, e inserindo 
    dentro dela, os states de dados de todos os inputs do form de Register 

126-criando hook de autenticação 
-criado useAuthtenication.js e a lógica de autenticação 

















