SEÇÃO 1: INTRODUÇÃO 


1-introdução do curso 
-explicação do curso do conteúdo a ser utilizado 

2-apresentação do curso 
-sobre os módulos e os projetos 

3-o que é o react? 
-é uma biblioteca Javascript para aplicações front-end 
-aplicações chamadas de SPA 
-React é baseado em componentes 
-mantido pelo facebook 

4-o que é node.js?
-node.js é uma runtime do Javascript, ou seja, biblioteca para compilar furante a execução do programa 
-possibilita criar softwares em JS no lado do servidor, nos bastidores, o código JS roda em C++ 

5-o que é o npm? 
-npm é um gerenciador de pacotes do node 
-possibilita utilizar bibliotecas de terceiros 
-os módulos externos ficam em uma pasta chamada node_modules 
-a pasta node_modules deve ser descartável, ou seja, a cada instalação do projeto baixamos todos os pacotes novamente 

6-instalação do node.js no windows 
-já instalado 

7-instalação do node.js no linus
-não necessário 

8-instalação do vs code 
-já instalado

9-hello world com react 
-react precisa ser instalado na pasta que será o projeto, via npx, e posteriormente iniciado 
    npx create-react-app hello-world
    npm start

10-estrutura inicial do react 
-node_modules = onde ficam as dependências do projeto (não versionada por ser muito grande)
-public = Assets estáticos e HTML de inicialização (é o que o usuário tem acesso quando acessa)
-src = onde são de fato programados os apps, onde vão os componentes e etc...
-src/index.js = arquivo de inicialização do react 
-src/App.js = componente principal da aplicação 

11-extensão para o vs code para react 
-es7 + React/Redux/React-Native snippets (já instalado) 
-analisar os atalhos para criar uma estrutura de componente já pronta e várias outras coisas

12-configurando o Emmet para o react 
-é uma extensão nativa do vs code que ajuda a escrever HTML mais rapido, porém não vêm configurado 
    por padrão 
-acessa: File > Settings > Extensions e procurar o Emmet 
    lá vamos incluir a lunguagem: javascript - javascriptreact 
(serve para não precisar ficar fazendo o HTML todo não, e sim usar as abreviações)

13-como tirar o melhor proveito deste curso 
-sempre fazer os códigos junto 
-fazer os exercícios 

14-repositório do curso 
-https://github.com/matheusbattisti/curso_react

-tarefa 1: praticando react 
-ok

15-conclusão da seção 
-ok


SEÇÃO 2: FUNDAMENTOS DO REACT 


16-introdução da seção 
-ok 

17-criando componentes
-os componentes ficam em uma pasta criada manualmente, chamada 
    components, nome do componente.js 
-por padrão, cada componente inicia com a area de importação, 
    caso houver, onde pega dados de outro componente. No corpo, 
    é onde vai a sua funtion() que retorna a sua ação. 
    Por último, é onde vai a sua exportação, para que o template 
    seja recebido pelo App.js. 
-criado novo projeto do módulos: 
    npx create-react-app fundamentos 
-criado em src, a pasta components, e dentro o componente 
    FirstComponent.js 
    feito todo processo de configurar a funtion() em arrow function 
    e sua exportação 

18-importação de componentes 
-primeiramente o componente precisa ter seu export definido 
-geralmente são importados em App.js, lá deve ser feito a importação 
    do componente, em seguida inserido dentro de < />

19-conhecendo o JSX 
-JSX é o HTML dodo react 
-ficam no return do componente 
-pode ter apenas um elemento pai 
-JSX é javascript rodando pelo react 

20-comentários nos componentes 
-// ou /*  */

21-template expressions 
-para interpolar JS dentro do JSX, basta envolver entre chaves { }

22-hierarquia de componentes 
-os componentes podem ser reutilizados em outros componentes, e não 
    somente no App.js, sempre utilizando os métodos de import e export 

23-eventos 
-eventos servem para disparar alguma ação 
-a chamada do evento faz no próprio html: onClick={nomeDaFunction}, 
    e dentro do componente deste evento, cria-se a função a ser realizada 

24-funções no evento 
-é possível executar a lógica da função direto no HTML, porém, não 
    é recomendado. (função in-line)

25-função de renderização 
-funções que retornam JSX 

Tarefa 2: Desafio sobre os conceitos básicos de React
-ok 

26-conclusão da seção 
-ok

teste 1-Quiz sobre fundamentos 
-ok 


SEÇÃO 3: AVANÇANDO EM REACT 


27-introdução da seção 
-ok 

Tarefa: Desafio sobre criação de apps em React
-ok 

28-imagens públicas em react 
-as imagens públicas do projeto podem ficar na pasta public 
-quando estiverem lá, podem ser chamadas pelas tags img diretamente por: /home.jpg, pois, a pasta public 
    fica linkada com src das imagens. Quando está em public, apenas o / mais o nome da img

29-imagens em src(Assets)
-colocar as imagens em: src/assets é uma abordagem bem utilizada 
-em assets é preciso importar a imagem, como se fosse um componente mesmo 
    ex: import City from './assets/city.jpg'; 

30-o que são hooks? 
- são recursos do react que tem diversas funções, evita ter que recriar funções
-todos os hooks começam com 'use', ex: useState 
-podemos criar os próprios hooks, os custom hook
-hooks precisam ser importados 

31-useState na prática 
-é um dos mais utilizados 
-utilizado para gerenciar o estado de algum dado 
-atalho para criar o template de um componente: rafce 
-o useState, precisa que inicie uma const de array com 2 valores, um que consome o que existe no parâmetro 
    de useState() e o outro que seta, e o paramêtro deste, pode alterar o valor no primeiro item do array 

32-renderização de listas 
-utiliza o método map() para auxiliar 
-o map() ajuda a listar item por item de um array, criado anteriormente dentro de um const  

33-a proprioedade key 
-iterar listar sem a proprioedade key nos gera um warning, mostrado no console 
-quando usado o map, em seu parâmetro onde vai o item, em segundo colocamos um 'i', em seguida chamado na 
    li com o key 

34-previous state 
-(estado anterior) 
-ficaram dúvidas 

35-renderização condicional 
-é quando imprimimos uma parte do template baseado em uma condição 
-interessante usar, por exemplo, em situações de usuário autenticado ou não  

36-if e else no JSX 
-no caso, usado o if ternário 
    ex: condicao ? bloco1 : bloco 2 

37-introdução as Props 
-permite passar valores de um componente pai para um componente filho 
-muito útil quando os dados forem carregados via banco de dados 
-as Props vem em um objeto no argumento da função do componente 
-o Props é inserido no App.js e lá o dado recebe um nome 
    já no componente que for usar o Props, ele é definido no parâmetro da função, e vai ser tratado como um objeto 
    onde o dado for chamado no componente, entre {} chama-se props.nomeDoDado 
-o componente pai, que no caso é App.js estão passando dados para o componente filho, que no caso é ShowUserName.js 
-ele pode receber valores diretos, valores de variável, e valores de state 

38-destructuring em props 
-é comum passar mais de um prop em um componente 
-para facilitar, o react permite desustruturar as propriedades que chegam, com o recurso destructuring 
-é a forma mais moderna 
-neste caso, não precisa chamar como na maneira anteiro. igual objeto: props.algumaCoisa 

39-reaproveitamento de componente 
-o props tem o objetivo por si só, reaprovietar componente 
-o mesmo componente pode ser reaproveitado quantas vezes forem necessárias 

40-renderização de lista em componente 
-é uma reutilização com loop, usando o map() 
-faz se a chamada direto no App.js, a chamada do componente vi estar dentro de um loop com map()

41-Fragments 
-são interessantes para quando precisamos ter mais de um elemento pai em um componente 
-criamos uma tag vazia: <>...</>, e ela serve como um elemento pai 

42-a prop children 
-consiste em, no paramêtro da função do componente, definir um children desestruturado, e, no corpo da função 
    do mesmo componente, definir a children também.
    no App.js, o componente em questão deve estar entre tag dupla do componente(<componente></componente>)
        e dentro disso, pode se incluir outras tags HTML 

43-função com prop 
-consiste em, um componente pai, que detém a function(), porém, é acionada por um componente filho, o qual 
    contém o método de click em um button, e sua prop quando acionada no elemento pai, chama a referida function() 

44-state lift 
-conhecido como elevação de state, que é quando um valor é elevado do componente filho para o componente pai 
-geralmente temos um componente que usa o state e outro que o altera 

Desafio 4 
-ok 

45-conclusão da seção 
-ok 


SEÇÃO 4: REACT E CSS 


46-introdução da seção 
-ok 

47-css global 
-é utilizado para estilizar diversos elementos em comum ou fazer um reset no css 
-utilizamos o arquivo index.css para isso, que está na pasta src 
-feito reset css em index.css 

48-CSS de componentes 
-é um CSS feito para um componente específico, tem o mesmo nome do componente, porém com a extensão .css 
-precisa este .css, ser importando no seu componente 
-para inserir um class em uma tag, diferente do HTML comum, usa-se o className 

49-CSS inLine 
-é igual ao css inline do CSS comum 
-porém, css inline deve-se ser evitado, por boas práticas de programação 

50-CSS inline dinâmico 
-maniera mais avançada do inline comum 
-aplica estilo baseado em uma condicional 
-usa-se a condicional ternário dentro do próprio style 
  
51-classes dinâmicas 
-consiste em aplicar lógica para mudar a classe de CSS de um elemento 
-usa o if ternário, condicionando entre 2 classes css
-as classes ficam isoladas no arquivo .css 

52-CSS modules 
-é um recurso de CSS scoped 
-ele vai ser exclusivo do componente, não vaza 
-o nome será: Componente.module.css 
-precisa ser importado também 

Tarefa 5 - desafio sobre react com css 
-ok 

53-coclusão da seção 
-ok 


SEÇÃO 5: FORMULÁRIOS COM REACT


54 a 64 OK 


SEÇÃO 6: PROJETO: SECRET WORD 

65 a 80 Ok 


SEÇÃO 7: REQUISIÇÕES HTTP COM REACT 


81-introdução da seção 
-trata de fazer integração com o back end 

82-criando projeto com JSON server 
-JSON server é um pacote do npm 
-ele simula uma API, possibilitando fazer requisições 
-instalando o JSON server 
    bpm i json-server 
-precisa ser configurado em package.json 
    em scripts: 
         "server": "json-server --watch data/db.json"
-para rodar o servidor local (mocado)
    npm run server

83-a importância do useEffect 
-o useEffect faz com que determinada ação seja executada apenas uma vez (quando renderiza a tela)
-estará sempre presente nas requisições assíncronas, pois o useEffect possui um array de dependências 
    que pode ser inserida quais funções serão executada no useEffect 

84-resgatando dados da API 
-primeiramente, ter um local para salvá-los(useState)
-renderizar a chamada da APi apenas uma vez(useEffect)
-um meio de fazer a requisição assíncrona(Fetch API)

85-adicionando dados com react 
-primeiramente, precisa resgatar os dados inseridos no form via useState (value e onChange e onSubmit)
-reunir os dados em um função de submit e enviar via request por fetch post 
-no fetch POST, é necessário configurar o method, que é post, o headers que é o tipo de dado enviado, e o 
    body, que contém de fato os dados a serem submetidos 

86-carregamento dinâmico de dados 
-se a requisição foi feita com sucesso, podemos adiionar o item a lista após o request 
-usa-se o set do useState para isso 
-usando o setProduct, cria-se uma função que utiliza os dados antigos(spread operator) e em seguida uma const 
    contendo os dados atualizados, isso ainda dentro da função de submit 

87-Custom hook para resgate de dados 
-dividindo funções para poderem ser aproveitadas em hooks 
-está técnica é chamada de custom hooks 
-é padrão usar uma pasta hooks 
-cria-se uma função e exporta ela 

88-refatorando o POST 
-mesmo conceito de usar um hook especifico para o POST 
-nem sempre utilizar um hook é a melhor estratégia 

89-estado de loading 
-quando fazemos uma requição para a API, exist um intervalo de loading entre a requisição e o 
    recebimento da resposta, 
-precisa identificar quando começa e termina o estado de loading 

90-loading no POST
-podemos bloquear ações indevidas em outras request também, como no POST 
-podendo, por exemplo, remover a ação de adicionar outro item enquanto o request ainda não finalizou 

91-tratando erros 
-usa-se o try/catch para tratar erros de requisições 

Tarefa: Desafio sobre requisições HTTP
ok 

92-conclusão da seção 
-ok 


SEÇÃO 8: REACT ROUTER 


93-introdução da seção 
-ok 

94-o que é o react router? 
-é um pacote do próprio react, serve para criar estruturas de rotas 
-permite que a SPA teja diversas páginas, sem refresh na página 
-o pacote precisa ser instalado

Tarefa 7: Desafio sobre projetos em React com dependências
cria um novo projeto react 
em seguida, instalar a biblioteca react-router-dom 
-instalar também o json server 
-colocar pelo menos 3 produtos da seção anterior no arquivo db.json server 
-criar o script de inicialização json-server
-npm i json-server react-router-dom
-npm run server para rodar o db.json 

95-confugurando o react router 
-é necessário importar 3 elementos do react-router-dom 
    BrowserRouter: define onde a área do nosso app que vai trocar as páginas 
    Routes: define as rotas 
    Route: um elemento deste para cada rota, configurar com path e componente da rota 

96-navegação entre páginas 
-é necessário importar o Link, também do react-router-dom 
-é no Link que definimos onde será clicado, e para qual componente será direcionado o usuário 
-geralmente está em um navbar 
-o Link geralmente fica dentro do BrowserRouter, justamente por ter elementos do react-router-dom

97-carregando dados 
-carregando dados usando o hook useFetch 
-depois é possível utilizá-lo para o carregamento de dados individuais 
-os dados do componente useFetch foram importados em Home.js 

98-rotas dinâmicas 
-criado em Home.js, no final do loop map, um Link que, recebendo o id do produto, direciona para o componente
    Product.js, o qual, usando o useParamns do react, recebendo o id do produto, listando seus dados 
    individualmente por id 

99-carregamento dinâmico de dados 
-product.js recebe useFetch, colocando os parâmetro dentro de uma const, e trazendo os dados individuais 

100-nested router 
-serve para termos acesso ao parâmetro da URL também 
-criada uma sub-página de mais informações do produto 

101-pagina 404 
-é possível criar uma página 404 customizada
-é necessário criar o componente desta página, e no App.js, definir o path como * 
-desta forma, qualquer rota que não ecista, cairá neste componente 

102-Link ativo 
-para ter acesso a uma modificação para os links ativos vamos trocar o Link pelo NavLink 
-neste elemento temos acesso a um valor chamado isActive 
-ou seja, podemos ativar uma classe se a rota atual for a que está no atributo to 

103-search params 
-é um recurso que permite obter o que vem da URL em forma de parâmetro, ex: produto?q=camisa 
-utilizamos o hook useSearchParams para obte-los 
-com este recurso fica fácil fazer uma funcionalidade de busca no sistema 

104-redirecionamento de URL 
-

105-conclusão da seção 
-ok 


SEÇÃO 9: CONTEXT API DO REACT


106-





